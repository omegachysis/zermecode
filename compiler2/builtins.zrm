type Bool
{
    #cpp_forward("bool val;");
    #cpp_forward("#__Bool(bool val) { this->val = val; }");
}

type String 
{
    #cpp_forward("const char* raw;");
    #cpp_forward("#__String(const std::string& raw) { this->raw = raw.c_str(); }");
}

type Float32 
{
    #cpp_forward("float raw;");
    #cpp_forward("#__Float32(const float& raw) { this->raw = raw; }");
}

type Float64 
{
    #cpp_forward("double raw;");
    #cpp_forward("#__Float64(const double& raw) { this->raw = raw; }");
}

type Rat 
{
    #cpp_forward("mpq_t raw;");
    #cpp_forward("#__Rat() { mpq_init(raw); }");
    #cpp_forward("#__Rat(const std::string& from, const int& base) 
        { mpq_init(raw); mpq_set_str(raw, from.c_str(), base); mpq_canonicalize(raw); }");
    #cpp_forward("~#__Rat() { mpq_clear(raw); }");
}

type Int 
{
    #cpp_forward("mpz_t raw;");
    #cpp_forward("#__Int() { mpz_init(raw); }");
    #cpp_forward("#__Int(const std::string& from, const int& base) 
        { mpz_init_set_str(raw, from.c_str(), base); }");
    #cpp_forward("~#__Int() { mpz_clear(raw); }");
}

fn op+(Int a, Int b) -> Int 
{
    #cpp("
    #__Int res;
    mpz_add(res.raw, #__a.raw, #__b.raw);
    return res;");
}

fn op-(Int a, Int b) -> Int 
{
    #cpp("
    #__Int res;
    mpz_sub(res.raw, #__a.raw, #__b.raw);
    return res;");
}

fn op-(Int a) -> Int 
{
    #cpp("
    #__Int res;
    mpz_neg(res.raw, #__a.raw);
    return res;");
}

fn op*(Int a, Int b) -> Int 
{
    #cpp("
    #__Int res;
    mpz_mul(res.raw, #__a.raw, #__b.raw);
    return res;");
}

fn op^(Int a, Int b) -> Int 
{
    #cpp("
    #__Int res;
    mpz_pow_ui(res.raw, #__a.raw, mpz_get_ui(#__b.raw));
    return res;");
}

fn op+(Float32 a, Float32 b) -> Float32 
{
    #cpp("return #__Float32(#__a.raw + #__b.raw);");
}

fn op-(Float32 a) -> Float32 
{
    #cpp("return #__Float32(-#__a.raw);");
}

fn op-(Float32 a, Float32 b) -> Float32 
{
    #cpp("return #__Float32(#__a.raw - #__b.raw);");
}

fn op*(Float32 a, Float32 b) -> Float32 
{
    #cpp("return #__Float32(#__a.raw * #__b.raw);");
}

fn op^(Float32 a, Float32 b) -> Float32 
{
    #cpp("return #__Float32(std::pow(#__a.raw, #__b.raw));");
}

fn print(String str) 
{
    #cpp("std::cout << #__str.raw;");
}

fn println() 
{
    #cpp("std::cout << std::endl;");
}

fn println(String str) 
{
    #cpp("std::cout << #__str.raw << std::endl;");
}

fn print(Int x) 
{
    #cpp("std::cout << #__x.raw;");
}

fn print(Float32 x) 
{
    #cpp("std::cout << #__x.raw;");
}

fn print(Rat x) 
{
    #cpp("std::cout << #__x.raw;");
}