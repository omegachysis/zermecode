type Shape {
    fn draw(Ctx&);
    fn translate&(Real x, Real y);
}

type Point : Shape {
    Real x := _;
    Real y := _;

    fn draw(Ctx& ctx) { /* ... */ }

    fn translate&(Real x, Real y) {
        this.x += x;
        this.y += y;
    }
}

type Rectangle : Shape {
    Real centerX := ?;
    Real centerY := ?;

    Real _width := ?;
    assume(_width) > 0;

    get width -> Real {
        _width
    }
    set width {
        assume(value > 0);
        _width = value;
    }

    Real _width := ?;
    assume(_width) > 0;

    get height -> Real {
        _height
    }
    set height {
        assume(value > 0);
        _height = value;
    }

    fn draw(Ctx& ctx) { /* ... */ }

    fn translate&(Real x, Real y) {
        this.centerX += x;
        this.centerY += y;
    }

    fn scale&(Real x, Real y) {
        assume(x > 0);
        assume(y > 0);
        this._width *= x;
        this._height *= y;
    }
}

type BetterRectangle : Rectangle {
    fn draw(Ctx& ctx) {
        override;
        /* ... */
    }
}