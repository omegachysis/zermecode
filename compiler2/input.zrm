type String {
    #cpp("const char* raw;");
    #cpp("#__String(const std::string& raw) { 
        this->raw = raw.c_str(); }");
}

type Float32 {
    #cpp("float raw;");
    #cpp("#__Float32(const float& raw) { 
        this->raw = raw; }");
}

type Float64 {
    #cpp("double raw;");
    #cpp("#__Float64(const double& raw) { 
        this->raw = raw; }");
}

type Rat {
    #cpp("mpq_t raw;");
    #cpp("#__Rat(const std::string& from, const int& base) 
        { mpq_set_str(raw, from.c_str(), base); }");
    #cpp("~#__Rat() { mpq_clear(raw); }");
}

type Int {
    #cpp("mpz_t raw;");
    #cpp("#__Int() { mpz_init(raw); }");
    #cpp("#__Int(const std::string& from, const int& base) 
        { mpz_init_set_str(raw, from.c_str(), base); }");
    #cpp("~#__Int() { mpz_clear(raw); }");
}

fn op+(Int a, Int b) -> Int {
    #cpp("
    #__Int res;
    mpz_add(res.raw, #__a.raw, #__b.raw);
    return res;");
}

fn op-(Int a, Int b) -> Int {
    #cpp("
    #__Int res;
    mpz_sub(res.raw, #__a.raw, #__b.raw);
    return res;");
}

fn op-(Int a) -> Int {
    #cpp("
    #__Int res;
    mpz_neg(res.raw, #__a.raw);
    return res;");
}

fn op*(Int a, Int b) -> Int {
    #cpp("
    #__Int res;
    mpz_mul(res.raw, #__a.raw, #__b.raw);
    return res;");
}

fn op^(Int a, Int b) -> Int {
    #cpp("
    #__Int res;
    mpz_pow_ui(res.raw, #__a.raw, mpz_get_ui(#__b.raw));
    return res;");
}

fn print(String str) {
    #cpp("std::cout << #__str.raw;");
}

fn println() {
    #cpp("std::cout << std::endl;");
}

fn println(String str) {
    #cpp("std::cout << #__str.raw << std::endl;");
}

fn print(Int x) {
    #cpp("std::cout << #__x.raw;");
}

fn main() {
    print(2^100 * 90 - 50);
    println("\nHello World!");
}