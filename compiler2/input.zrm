type Bool
{
    #cpp_forward("bool val;");
    #cpp_forward("#__Bool(bool val) { 
        this->val = val; 
    }");
}

type String 
{
    #cpp_forward("std::string val;");
    #cpp_forward("#__String(const std::string& val) { 
        this->val = val; 
    }");
}

type Float32 
{
    #cpp_forward("float val;");
    #cpp_forward("#__Float32(const float& val) { 
        this->val = val; 
    }");
}

type Float64 
{
    #cpp_forward("double val;");
    #cpp_forward("#__Float64(const double& val) { 
        this->val = val;
    }");
}

type Rat 
{
    #cpp_forward("mpq_t val;");
    #cpp_forward("#__Rat() { 
        mpq_init(val); 
    }");
    #cpp_forward("#__Rat(const std::string& from, const int& base) { 
        mpq_init(val); 
        mpq_set_str(val, from.c_str(), base); 
        mpq_canonicalize(val);
    }");

    #cpp_forward("#__Rat(const #__Rat& other) {
        mpq_init(val);
        mpq_set(val, other.val);
    }");
    #cpp_forward("#__Rat& operator=(const #__Rat& other) {
        mpq_set(val, other.val);
        return *this;
    }");
    #cpp_forward("~#__Rat() { 
        mpq_clear(val); 
    }");
}

type Int 
{
    #cpp_forward("mpz_t val;");
    #cpp_forward("#__Int() { 
        mpz_init(val); 
    }");
    #cpp_forward("#__Int(const std::string& from, const int& base) { 
        mpz_init_set_str(val, from.c_str(), base); 
    }");

    #cpp_forward("#__Int(const #__Int& other) {
        mpz_init(val);
        mpz_set(val, other.val);
    }");
    #cpp_forward("#__Int& operator=(const #__Int& other) {
        mpz_set(val, other.val);
        return *this;
    }");
    #cpp_forward("~#__Int() { 
        mpz_clear(val); 
    }");
}

fn op+(Int a, Int b) -> Int 
{
    #cpp("
    #__Int res;
    mpz_add(res.val, #__a.val, #__b.val);
    return res;");
}

fn op-(Int a, Int b) -> Int 
{
    #cpp("
    #__Int res;
    mpz_sub(res.val, #__a.val, #__b.val);
    return res;");
}

fn op-(Int a) -> Int 
{
    #cpp("
    #__Int res;
    mpz_neg(res.val, #__a.val);
    return res;");
}

fn op*(Int a, Int b) -> Int 
{
    #cpp("
    #__Int res;
    mpz_mul(res.val, #__a.val, #__b.val);
    return res;");
}

fn op^(Int a, Int b) -> Int 
{
    #cpp("
    #__Int res;
    mpz_pow_ui(res.val, #__a.val, mpz_get_ui(#__b.val));
    return res;");
}

fn op+(Float32 a, Float32 b) -> Float32 
{
    #cpp("return #__Float32(#__a.val + #__b.val);");
}

fn op-(Float32 a) -> Float32 
{
    #cpp("return #__Float32(-#__a.val);");
}

fn op-(Float32 a, Float32 b) -> Float32 
{
    #cpp("return #__Float32(#__a.val - #__b.val);");
}

fn op*(Float32 a, Float32 b) -> Float32 
{
    #cpp("return #__Float32(#__a.val * #__b.val);");
}

fn op^(Float32 a, Float32 b) -> Float32 
{
    #cpp("return #__Float32(std::pow(#__a.val, #__b.val));");
}

fn print(String str) 
{
    #cpp("std::cout << #__str.val;");
}

fn println() 
{
    #cpp("std::cout << std::endl;");
}

fn println(String str) 
{
    #cpp("std::cout << #__str.val << std::endl;");
}

fn print(Int x) 
{
    #cpp("std::cout << #__x.val;");
}

fn print(Float32 x) 
{
    #cpp("std::cout << #__x.val;");
}

fn print(Rat x) 
{
    #cpp("std::cout << #__x.val;");
}

fn main() 
{
    let x := 1;
    unless False { 
        x := 2;
    }
    else {
        x := 3;
    }

    print(x);
}